{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{authAPI}from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isGuestMode,setIsGuestMode]=useState(false);const[isLoading,setIsLoading]=useState(true);useEffect(()=>{const token=localStorage.getItem('token');const storedUser=localStorage.getItem('user');const guestMode=localStorage.getItem('guestMode');if(guestMode==='true'){setIsGuestMode(true);setUser({id:-1,email:'guest@example.com',full_name:'Guest User'});}else if(token&&storedUser){try{setUser(JSON.parse(storedUser));}catch(error){console.error('Error parsing stored user:',error);localStorage.removeItem('token');localStorage.removeItem('user');}}setIsLoading(false);},[]);const login=async(email,password)=>{try{const response=await authAPI.login(email,password);const{access_token,user:userData}=response;localStorage.setItem('token',access_token);localStorage.setItem('user',JSON.stringify(userData));setUser(userData);}catch(error){console.error('Login error:',error);throw error;}};const register=async(email,password,full_name)=>{try{const response=await authAPI.register(email,password,full_name);const{access_token,user:userData}=response;localStorage.setItem('token',access_token);localStorage.setItem('user',JSON.stringify(userData));setUser(userData);}catch(error){console.error('Registration error:',error);throw error;}};const enterGuestMode=()=>{localStorage.setItem('guestMode','true');setIsGuestMode(true);setUser({id:-1,email:'guest@example.com',full_name:'Guest User'});};const logout=()=>{localStorage.removeItem('token');localStorage.removeItem('user');localStorage.removeItem('guestMode');// Clear all guest data\nlocalStorage.removeItem('guestDocuments');localStorage.removeItem('guestChatHistory');setUser(null);setIsGuestMode(false);};const value={user,isGuestMode,login,register,enterGuestMode,logout,isLoading};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","isGuestMode","setIsGuestMode","isLoading","setIsLoading","token","localStorage","getItem","storedUser","guestMode","id","email","full_name","JSON","parse","error","console","removeItem","login","password","response","access_token","userData","setItem","stringify","register","enterGuestMode","logout","value","Provider"],"sources":["/Users/vaibhavmurarka/Desktop/react/ragfrontendfinal/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User, authAPI } from '../services/api';\n\ninterface AuthContextType {\n  user: User | null;\n  isGuestMode: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string, full_name: string) => Promise<void>;\n  enterGuestMode: () => void;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isGuestMode, setIsGuestMode] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    const storedUser = localStorage.getItem('user');\n    const guestMode = localStorage.getItem('guestMode');\n    \n    if (guestMode === 'true') {\n      setIsGuestMode(true);\n      setUser({\n        id: -1,\n        email: 'guest@example.com',\n        full_name: 'Guest User'\n      });\n    } else if (token && storedUser) {\n      try {\n        setUser(JSON.parse(storedUser));\n      } catch (error) {\n        console.error('Error parsing stored user:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string): Promise<void> => {\n    try {\n      const response = await authAPI.login(email, password);\n      const { access_token, user: userData } = response;\n      \n      localStorage.setItem('token', access_token);\n      localStorage.setItem('user', JSON.stringify(userData));\n      setUser(userData);\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  };\n\n  const register = async (email: string, password: string, full_name: string): Promise<void> => {\n    try {\n      const response = await authAPI.register(email, password, full_name);\n      const { access_token, user: userData } = response;\n      \n      localStorage.setItem('token', access_token);\n      localStorage.setItem('user', JSON.stringify(userData));\n      setUser(userData);\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  };\n\n  const enterGuestMode = (): void => {\n    localStorage.setItem('guestMode', 'true');\n    setIsGuestMode(true);\n    setUser({\n      id: -1,\n      email: 'guest@example.com',\n      full_name: 'Guest User'\n    });\n  };\n\n  const logout = (): void => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    localStorage.removeItem('guestMode');\n    // Clear all guest data\n    localStorage.removeItem('guestDocuments');\n    localStorage.removeItem('guestChatHistory');\n    setUser(null);\n    setIsGuestMode(false);\n  };\n\n  const value: AuthContextType = {\n    user,\n    isGuestMode,\n    login,\n    register,\n    enterGuestMode,\n    logout,\n    isLoading,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}