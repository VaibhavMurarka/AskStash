{"ast":null,"code":"// Guest document interface with offline storage\nclass GuestService{constructor(){this.documentsKey='guestDocuments';this.chatHistoryKey='guestChatHistory';}// Document operations\ngetDocuments(){try{const stored=localStorage.getItem(this.documentsKey);return stored?JSON.parse(stored):[];}catch(error){console.error('Error loading guest documents:',error);return[];}}saveDocument(document){const documents=this.getDocuments();const newDocument={...document,id:Date.now().toString(),created_at:new Date().toISOString()};documents.push(newDocument);localStorage.setItem(this.documentsKey,JSON.stringify(documents));return newDocument;}deleteDocument(documentId){try{const documents=this.getDocuments();const filteredDocuments=documents.filter(doc=>doc.id!==documentId);localStorage.setItem(this.documentsKey,JSON.stringify(filteredDocuments));return true;}catch(error){console.error('Error deleting guest document:',error);return false;}}getDocument(documentId){const documents=this.getDocuments();return documents.find(doc=>doc.id===documentId)||null;}// Chat operations\ngetChatHistory(){try{const stored=localStorage.getItem(this.chatHistoryKey);return stored?JSON.parse(stored):[];}catch(error){console.error('Error loading guest chat history:',error);return[];}}saveChatMessage(message){const history=this.getChatHistory();const newMessage={...message,id:Date.now().toString(),created_at:new Date().toISOString()};history.push(newMessage);localStorage.setItem(this.chatHistoryKey,JSON.stringify(history));return newMessage;}// AI chat with full Gemini integration\nasync generateAIResponse(message,selectedDocuments,useAllDocuments){try{let context='';let contextSources=[];if(useAllDocuments){const allDocs=this.getDocuments();context=allDocs.map(doc=>`--- Document: ${doc.filename} ---\\n${doc.content}`).join('\\n\\n');contextSources=allDocs.map(doc=>({id:doc.id,filename:doc.filename}));}else if(selectedDocuments&&selectedDocuments.length>0){const allDocs=this.getDocuments();const selectedDocs=allDocs.filter(doc=>selectedDocuments.includes(doc.id));context=selectedDocs.map(doc=>`--- Document: ${doc.filename} ---\\n${doc.content}`).join('\\n\\n');contextSources=selectedDocs.map(doc=>({id:doc.id,filename:doc.filename}));}const response=await fetch('https://vaibhavmurarka2.pythonanywhere.com/api/guest/chat',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({message,context,context_sources:contextSources})});if(!response.ok){throw new Error('Failed to get AI response');}const data=await response.json();return{response:data.response,context_used:contextSources.length>0,context_sources:contextSources};}catch(error){console.error('Error generating AI response:',error);return{response:`I apologize, but I encountered an error while processing your request: ${error}`,context_used:false,context_sources:[]};}}// Text extraction with full backend API capabilities\nasync extractTextFromFile(file){try{// Use the same backend API for text extraction\nconst formData=new FormData();formData.append('file',file);const response=await fetch('https://vaibhavmurarka2.pythonanywhere.com/api/guest/extract-text',{method:'POST',body:formData});if(!response.ok){throw new Error('Failed to extract text from file');}const data=await response.json();return data.extracted_text;}catch(error){console.error('Error extracting text:',error);// Fallback to basic text extraction for text files\nif(file.type.startsWith('text/')||file.name.toLowerCase().endsWith('.txt')){return new Promise((resolve,reject)=>{const reader=new FileReader();reader.onload=e=>{var _e$target;return resolve((_e$target=e.target)===null||_e$target===void 0?void 0:_e$target.result);};reader.onerror=()=>reject(new Error('Failed to read text file'));reader.readAsText(file);});}return`[Error extracting text from ${file.name}]: ${error}`;}}// Cleanup function - called when user leaves or closes browser\nclearAllData(){localStorage.removeItem(this.documentsKey);localStorage.removeItem(this.chatHistoryKey);localStorage.removeItem('guestMode');}// Get storage usage info\ngetStorageInfo(){const documents=this.getDocuments();const chatHistory=this.getChatHistory();const documentsSize=JSON.stringify(documents).length;const chatSize=JSON.stringify(chatHistory).length;const totalBytes=documentsSize+chatSize;const estimatedSize=totalBytes<1024?`${totalBytes} bytes`:totalBytes<1024*1024?`${(totalBytes/1024).toFixed(1)} KB`:`${(totalBytes/(1024*1024)).toFixed(1)} MB`;return{documentsCount:documents.length,chatMessagesCount:chatHistory.length,estimatedSize};}}export const guestService=new GuestService();// Setup cleanup when user closes browser/tab\nwindow.addEventListener('beforeunload',()=>{const isGuestMode=localStorage.getItem('guestMode')==='true';if(isGuestMode){guestService.clearAllData();}});// Setup visibility change handler to detect when user switches tabs/minimizes\ndocument.addEventListener('visibilitychange',()=>{if(document.visibilityState==='hidden'){const isGuestMode=localStorage.getItem('guestMode')==='true';if(isGuestMode){// Set a timestamp when user hides the page\nlocalStorage.setItem('guestModeLastActive',Date.now().toString());}}else if(document.visibilityState==='visible'){const isGuestMode=localStorage.getItem('guestMode')==='true';const lastActive=localStorage.getItem('guestModeLastActive');if(isGuestMode&&lastActive){const timeDiff=Date.now()-parseInt(lastActive);// If user was away for more than 30 minutes, clear guest data\nif(timeDiff>30*60*1000){guestService.clearAllData();window.location.reload();}}}});","map":{"version":3,"names":["GuestService","constructor","documentsKey","chatHistoryKey","getDocuments","stored","localStorage","getItem","JSON","parse","error","console","saveDocument","document","documents","newDocument","id","Date","now","toString","created_at","toISOString","push","setItem","stringify","deleteDocument","documentId","filteredDocuments","filter","doc","getDocument","find","getChatHistory","saveChatMessage","message","history","newMessage","generateAIResponse","selectedDocuments","useAllDocuments","context","contextSources","allDocs","map","filename","content","join","length","selectedDocs","includes","response","fetch","method","headers","body","context_sources","ok","Error","data","json","context_used","extractTextFromFile","file","formData","FormData","append","extracted_text","type","startsWith","name","toLowerCase","endsWith","Promise","resolve","reject","reader","FileReader","onload","e","_e$target","target","result","onerror","readAsText","clearAllData","removeItem","getStorageInfo","chatHistory","documentsSize","chatSize","totalBytes","estimatedSize","toFixed","documentsCount","chatMessagesCount","guestService","window","addEventListener","isGuestMode","visibilityState","lastActive","timeDiff","parseInt","location","reload"],"sources":["/Users/vaibhavmurarka/Desktop/react/ragfrontendfinal/src/services/guestService.ts"],"sourcesContent":["import { Document, ChatMessage } from './api';\n\n// Guest document interface with offline storage\nexport interface GuestDocument extends Omit<Document, 'id'> {\n  id: string; // Use string IDs for guest mode\n  content: string;\n}\n\nexport interface GuestChatMessage extends Omit<ChatMessage, 'id' | 'user_id'> {\n  id: string;\n  context_documents?: string;\n}\n\nclass GuestService {\n  private documentsKey = 'guestDocuments';\n  private chatHistoryKey = 'guestChatHistory';\n\n  // Document operations\n  getDocuments(): GuestDocument[] {\n    try {\n      const stored = localStorage.getItem(this.documentsKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error loading guest documents:', error);\n      return [];\n    }\n  }\n\n  saveDocument(document: Omit<GuestDocument, 'id' | 'created_at'>): GuestDocument {\n    const documents = this.getDocuments();\n    const newDocument: GuestDocument = {\n      ...document,\n      id: Date.now().toString(),\n      created_at: new Date().toISOString(),\n    };\n    \n    documents.push(newDocument);\n    localStorage.setItem(this.documentsKey, JSON.stringify(documents));\n    return newDocument;\n  }\n\n  deleteDocument(documentId: string): boolean {\n    try {\n      const documents = this.getDocuments();\n      const filteredDocuments = documents.filter(doc => doc.id !== documentId);\n      localStorage.setItem(this.documentsKey, JSON.stringify(filteredDocuments));\n      return true;\n    } catch (error) {\n      console.error('Error deleting guest document:', error);\n      return false;\n    }\n  }\n\n  getDocument(documentId: string): GuestDocument | null {\n    const documents = this.getDocuments();\n    return documents.find(doc => doc.id === documentId) || null;\n  }\n\n  // Chat operations\n  getChatHistory(): GuestChatMessage[] {\n    try {\n      const stored = localStorage.getItem(this.chatHistoryKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error loading guest chat history:', error);\n      return [];\n    }\n  }\n\n  saveChatMessage(message: Omit<GuestChatMessage, 'id' | 'created_at'>): GuestChatMessage {\n    const history = this.getChatHistory();\n    const newMessage: GuestChatMessage = {\n      ...message,\n      id: Date.now().toString(),\n      created_at: new Date().toISOString(),\n    };\n    \n    history.push(newMessage);\n    localStorage.setItem(this.chatHistoryKey, JSON.stringify(history));\n    return newMessage;\n  }\n\n  // AI chat with full Gemini integration\n  async generateAIResponse(message: string, selectedDocuments?: string[], useAllDocuments?: boolean): Promise<{\n    response: string;\n    context_used: boolean;\n    context_sources: Array<{ id: string; filename: string }>;\n  }> {\n    try {\n      let context = '';\n      let contextSources: Array<{ id: string; filename: string }> = [];\n\n      if (useAllDocuments) {\n        const allDocs = this.getDocuments();\n        context = allDocs.map(doc => `--- Document: ${doc.filename} ---\\n${doc.content}`).join('\\n\\n');\n        contextSources = allDocs.map(doc => ({ id: doc.id, filename: doc.filename }));\n      } else if (selectedDocuments && selectedDocuments.length > 0) {\n        const allDocs = this.getDocuments();\n        const selectedDocs = allDocs.filter(doc => selectedDocuments.includes(doc.id));\n        context = selectedDocs.map(doc => `--- Document: ${doc.filename} ---\\n${doc.content}`).join('\\n\\n');\n        contextSources = selectedDocs.map(doc => ({ id: doc.id, filename: doc.filename }));\n      }\n      const response = await fetch('https://vaibhavmurarka2.pythonanywhere.com/api/guest/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message,\n          context,\n          context_sources: contextSources,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to get AI response');\n      }\n\n      const data = await response.json();\n      return {\n        response: data.response,\n        context_used: contextSources.length > 0,\n        context_sources: contextSources,\n      };\n    } catch (error) {\n      console.error('Error generating AI response:', error);\n      return {\n        response: `I apologize, but I encountered an error while processing your request: ${error}`,\n        context_used: false,\n        context_sources: [],\n      };\n    }\n  }\n\n  // Text extraction with full backend API capabilities\n  async extractTextFromFile(file: File): Promise<string> {\n    try {\n      // Use the same backend API for text extraction\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const response = await fetch('https://vaibhavmurarka2.pythonanywhere.com/api/guest/extract-text', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to extract text from file');\n      }\n\n      const data = await response.json();\n      return data.extracted_text;\n    } catch (error) {\n      console.error('Error extracting text:', error);\n      \n      // Fallback to basic text extraction for text files\n      if (file.type.startsWith('text/') || file.name.toLowerCase().endsWith('.txt')) {\n        return new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.onload = (e) => resolve(e.target?.result as string);\n          reader.onerror = () => reject(new Error('Failed to read text file'));\n          reader.readAsText(file);\n        });\n      }\n      \n      return `[Error extracting text from ${file.name}]: ${error}`;\n    }\n  }\n\n  // Cleanup function - called when user leaves or closes browser\n  clearAllData(): void {\n    localStorage.removeItem(this.documentsKey);\n    localStorage.removeItem(this.chatHistoryKey);\n    localStorage.removeItem('guestMode');\n  }\n\n  // Get storage usage info\n  getStorageInfo(): { documentsCount: number; chatMessagesCount: number; estimatedSize: string } {\n    const documents = this.getDocuments();\n    const chatHistory = this.getChatHistory();\n    \n    const documentsSize = JSON.stringify(documents).length;\n    const chatSize = JSON.stringify(chatHistory).length;\n    const totalBytes = documentsSize + chatSize;\n    \n    const estimatedSize = totalBytes < 1024 \n      ? `${totalBytes} bytes`\n      : totalBytes < 1024 * 1024\n      ? `${(totalBytes / 1024).toFixed(1)} KB`\n      : `${(totalBytes / (1024 * 1024)).toFixed(1)} MB`;\n\n    return {\n      documentsCount: documents.length,\n      chatMessagesCount: chatHistory.length,\n      estimatedSize\n    };\n  }\n}\n\nexport const guestService = new GuestService();\n\n// Setup cleanup when user closes browser/tab\nwindow.addEventListener('beforeunload', () => {\n  const isGuestMode = localStorage.getItem('guestMode') === 'true';\n  if (isGuestMode) {\n    guestService.clearAllData();\n  }\n});\n\n// Setup visibility change handler to detect when user switches tabs/minimizes\ndocument.addEventListener('visibilitychange', () => {\n  if (document.visibilityState === 'hidden') {\n    const isGuestMode = localStorage.getItem('guestMode') === 'true';\n    if (isGuestMode) {\n      // Set a timestamp when user hides the page\n      localStorage.setItem('guestModeLastActive', Date.now().toString());\n    }\n  } else if (document.visibilityState === 'visible') {\n    const isGuestMode = localStorage.getItem('guestMode') === 'true';\n    const lastActive = localStorage.getItem('guestModeLastActive');\n    \n    if (isGuestMode && lastActive) {\n      const timeDiff = Date.now() - parseInt(lastActive);\n      // If user was away for more than 30 minutes, clear guest data\n      if (timeDiff > 30 * 60 * 1000) {\n        guestService.clearAllData();\n        window.location.reload();\n      }\n    }\n  }\n}); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}