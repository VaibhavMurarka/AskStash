{"ast":null,"code":"// Guest document interface with offline storage\n\nclass GuestService {\n  constructor() {\n    this.documentsKey = 'guestDocuments';\n    this.chatHistoryKey = 'guestChatHistory';\n  }\n  // Document operations\n  getDocuments() {\n    try {\n      const stored = localStorage.getItem(this.documentsKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error loading guest documents:', error);\n      return [];\n    }\n  }\n  saveDocument(document) {\n    const documents = this.getDocuments();\n    const newDocument = {\n      ...document,\n      id: Date.now().toString(),\n      created_at: new Date().toISOString()\n    };\n    documents.push(newDocument);\n    localStorage.setItem(this.documentsKey, JSON.stringify(documents));\n    return newDocument;\n  }\n  deleteDocument(documentId) {\n    try {\n      const documents = this.getDocuments();\n      const filteredDocuments = documents.filter(doc => doc.id !== documentId);\n      localStorage.setItem(this.documentsKey, JSON.stringify(filteredDocuments));\n      return true;\n    } catch (error) {\n      console.error('Error deleting guest document:', error);\n      return false;\n    }\n  }\n  getDocument(documentId) {\n    const documents = this.getDocuments();\n    return documents.find(doc => doc.id === documentId) || null;\n  }\n\n  // Chat operations\n  getChatHistory() {\n    try {\n      const stored = localStorage.getItem(this.chatHistoryKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error loading guest chat history:', error);\n      return [];\n    }\n  }\n  saveChatMessage(message) {\n    const history = this.getChatHistory();\n    const newMessage = {\n      ...message,\n      id: Date.now().toString(),\n      created_at: new Date().toISOString()\n    };\n    history.push(newMessage);\n    localStorage.setItem(this.chatHistoryKey, JSON.stringify(history));\n    return newMessage;\n  }\n\n  // AI chat with full Gemini integration\n  async generateAIResponse(message, selectedDocuments, useAllDocuments) {\n    try {\n      let context = '';\n      let contextSources = [];\n      if (useAllDocuments) {\n        const allDocs = this.getDocuments();\n        context = allDocs.map(doc => `--- Document: ${doc.filename} ---\\n${doc.content}`).join('\\n\\n');\n        contextSources = allDocs.map(doc => ({\n          id: doc.id,\n          filename: doc.filename\n        }));\n      } else if (selectedDocuments && selectedDocuments.length > 0) {\n        const allDocs = this.getDocuments();\n        const selectedDocs = allDocs.filter(doc => selectedDocuments.includes(doc.id));\n        context = selectedDocs.map(doc => `--- Document: ${doc.filename} ---\\n${doc.content}`).join('\\n\\n');\n        contextSources = selectedDocs.map(doc => ({\n          id: doc.id,\n          filename: doc.filename\n        }));\n      }\n      const response = await fetch('https://vaibhavmurarka14.pythonanywhere.com/api/guest/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message,\n          context,\n          context_sources: contextSources\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to get AI response');\n      }\n      const data = await response.json();\n      return {\n        response: data.response,\n        context_used: contextSources.length > 0,\n        context_sources: contextSources\n      };\n    } catch (error) {\n      console.error('Error generating AI response:', error);\n      return {\n        response: `I apologize, but I encountered an error while processing your request: ${error}`,\n        context_used: false,\n        context_sources: []\n      };\n    }\n  }\n\n  // Text extraction with full backend API capabilities\n  async extractTextFromFile(file) {\n    try {\n      // Use the same backend API for text extraction\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await fetch('https://vaibhavmurarka14.pythonanywhere.com/api/guest/extract-text', {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error('Failed to extract text from file');\n      }\n      const data = await response.json();\n      return data.extracted_text;\n    } catch (error) {\n      console.error('Error extracting text:', error);\n\n      // Fallback to basic text extraction for text files\n      if (file.type.startsWith('text/') || file.name.toLowerCase().endsWith('.txt')) {\n        return new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.onload = e => {\n            var _e$target;\n            return resolve((_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.result);\n          };\n          reader.onerror = () => reject(new Error('Failed to read text file'));\n          reader.readAsText(file);\n        });\n      }\n      return `[Error extracting text from ${file.name}]: ${error}`;\n    }\n  }\n\n  // Cleanup function - called when user leaves or closes browser\n  clearAllData() {\n    localStorage.removeItem(this.documentsKey);\n    localStorage.removeItem(this.chatHistoryKey);\n    localStorage.removeItem('guestMode');\n  }\n\n  // Get storage usage info\n  getStorageInfo() {\n    const documents = this.getDocuments();\n    const chatHistory = this.getChatHistory();\n    const documentsSize = JSON.stringify(documents).length;\n    const chatSize = JSON.stringify(chatHistory).length;\n    const totalBytes = documentsSize + chatSize;\n    const estimatedSize = totalBytes < 1024 ? `${totalBytes} bytes` : totalBytes < 1024 * 1024 ? `${(totalBytes / 1024).toFixed(1)} KB` : `${(totalBytes / (1024 * 1024)).toFixed(1)} MB`;\n    return {\n      documentsCount: documents.length,\n      chatMessagesCount: chatHistory.length,\n      estimatedSize\n    };\n  }\n}\nexport const guestService = new GuestService();\n\n// Setup cleanup when user closes browser/tab\nwindow.addEventListener('beforeunload', () => {\n  const isGuestMode = localStorage.getItem('guestMode') === 'true';\n  if (isGuestMode) {\n    guestService.clearAllData();\n  }\n});\n\n// Setup visibility change handler to detect when user switches tabs/minimizes\ndocument.addEventListener('visibilitychange', () => {\n  if (document.visibilityState === 'hidden') {\n    const isGuestMode = localStorage.getItem('guestMode') === 'true';\n    if (isGuestMode) {\n      // Set a timestamp when user hides the page\n      localStorage.setItem('guestModeLastActive', Date.now().toString());\n    }\n  } else if (document.visibilityState === 'visible') {\n    const isGuestMode = localStorage.getItem('guestMode') === 'true';\n    const lastActive = localStorage.getItem('guestModeLastActive');\n    if (isGuestMode && lastActive) {\n      const timeDiff = Date.now() - parseInt(lastActive);\n      // If user was away for more than 30 minutes, clear guest data\n      if (timeDiff > 30 * 60 * 1000) {\n        guestService.clearAllData();\n        window.location.reload();\n      }\n    }\n  }\n});","map":{"version":3,"names":["GuestService","constructor","documentsKey","chatHistoryKey","getDocuments","stored","localStorage","getItem","JSON","parse","error","console","saveDocument","document","documents","newDocument","id","Date","now","toString","created_at","toISOString","push","setItem","stringify","deleteDocument","documentId","filteredDocuments","filter","doc","getDocument","find","getChatHistory","saveChatMessage","message","history","newMessage","generateAIResponse","selectedDocuments","useAllDocuments","context","contextSources","allDocs","map","filename","content","join","length","selectedDocs","includes","response","fetch","method","headers","body","context_sources","ok","Error","data","json","context_used","extractTextFromFile","file","formData","FormData","append","extracted_text","type","startsWith","name","toLowerCase","endsWith","Promise","resolve","reject","reader","FileReader","onload","e","_e$target","target","result","onerror","readAsText","clearAllData","removeItem","getStorageInfo","chatHistory","documentsSize","chatSize","totalBytes","estimatedSize","toFixed","documentsCount","chatMessagesCount","guestService","window","addEventListener","isGuestMode","visibilityState","lastActive","timeDiff","parseInt","location","reload"],"sources":["/Users/vaibhavmurarka/Desktop/frontend/src/services/guestService.ts"],"sourcesContent":["import { Document, ChatMessage } from './api';\n\n// Guest document interface with offline storage\nexport interface GuestDocument extends Omit<Document, 'id'> {\n  id: string; // Use string IDs for guest mode\n  content: string;\n}\n\nexport interface GuestChatMessage extends Omit<ChatMessage, 'id' | 'user_id'> {\n  id: string;\n  context_documents?: string;\n}\n\nclass GuestService {\n  private documentsKey = 'guestDocuments';\n  private chatHistoryKey = 'guestChatHistory';\n\n  // Document operations\n  getDocuments(): GuestDocument[] {\n    try {\n      const stored = localStorage.getItem(this.documentsKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error loading guest documents:', error);\n      return [];\n    }\n  }\n\n  saveDocument(document: Omit<GuestDocument, 'id' | 'created_at'>): GuestDocument {\n    const documents = this.getDocuments();\n    const newDocument: GuestDocument = {\n      ...document,\n      id: Date.now().toString(),\n      created_at: new Date().toISOString(),\n    };\n    \n    documents.push(newDocument);\n    localStorage.setItem(this.documentsKey, JSON.stringify(documents));\n    return newDocument;\n  }\n\n  deleteDocument(documentId: string): boolean {\n    try {\n      const documents = this.getDocuments();\n      const filteredDocuments = documents.filter(doc => doc.id !== documentId);\n      localStorage.setItem(this.documentsKey, JSON.stringify(filteredDocuments));\n      return true;\n    } catch (error) {\n      console.error('Error deleting guest document:', error);\n      return false;\n    }\n  }\n\n  getDocument(documentId: string): GuestDocument | null {\n    const documents = this.getDocuments();\n    return documents.find(doc => doc.id === documentId) || null;\n  }\n\n  // Chat operations\n  getChatHistory(): GuestChatMessage[] {\n    try {\n      const stored = localStorage.getItem(this.chatHistoryKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error loading guest chat history:', error);\n      return [];\n    }\n  }\n\n  saveChatMessage(message: Omit<GuestChatMessage, 'id' | 'created_at'>): GuestChatMessage {\n    const history = this.getChatHistory();\n    const newMessage: GuestChatMessage = {\n      ...message,\n      id: Date.now().toString(),\n      created_at: new Date().toISOString(),\n    };\n    \n    history.push(newMessage);\n    localStorage.setItem(this.chatHistoryKey, JSON.stringify(history));\n    return newMessage;\n  }\n\n  // AI chat with full Gemini integration\n  async generateAIResponse(message: string, selectedDocuments?: string[], useAllDocuments?: boolean): Promise<{\n    response: string;\n    context_used: boolean;\n    context_sources: Array<{ id: string; filename: string }>;\n  }> {\n    try {\n      let context = '';\n      let contextSources: Array<{ id: string; filename: string }> = [];\n\n      if (useAllDocuments) {\n        const allDocs = this.getDocuments();\n        context = allDocs.map(doc => `--- Document: ${doc.filename} ---\\n${doc.content}`).join('\\n\\n');\n        contextSources = allDocs.map(doc => ({ id: doc.id, filename: doc.filename }));\n      } else if (selectedDocuments && selectedDocuments.length > 0) {\n        const allDocs = this.getDocuments();\n        const selectedDocs = allDocs.filter(doc => selectedDocuments.includes(doc.id));\n        context = selectedDocs.map(doc => `--- Document: ${doc.filename} ---\\n${doc.content}`).join('\\n\\n');\n        contextSources = selectedDocs.map(doc => ({ id: doc.id, filename: doc.filename }));\n      }\n\n      const response = await fetch('https://vaibhavmurarka14.pythonanywhere.com/api/guest/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message,\n          context,\n          context_sources: contextSources,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to get AI response');\n      }\n\n      const data = await response.json();\n      return {\n        response: data.response,\n        context_used: contextSources.length > 0,\n        context_sources: contextSources,\n      };\n    } catch (error) {\n      console.error('Error generating AI response:', error);\n      return {\n        response: `I apologize, but I encountered an error while processing your request: ${error}`,\n        context_used: false,\n        context_sources: [],\n      };\n    }\n  }\n\n  // Text extraction with full backend API capabilities\n  async extractTextFromFile(file: File): Promise<string> {\n    try {\n      // Use the same backend API for text extraction\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const response = await fetch('https://vaibhavmurarka14.pythonanywhere.com/api/guest/extract-text', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to extract text from file');\n      }\n\n      const data = await response.json();\n      return data.extracted_text;\n    } catch (error) {\n      console.error('Error extracting text:', error);\n      \n      // Fallback to basic text extraction for text files\n      if (file.type.startsWith('text/') || file.name.toLowerCase().endsWith('.txt')) {\n        return new Promise((resolve, reject) => {\n          const reader = new FileReader();\n          reader.onload = (e) => resolve(e.target?.result as string);\n          reader.onerror = () => reject(new Error('Failed to read text file'));\n          reader.readAsText(file);\n        });\n      }\n      \n      return `[Error extracting text from ${file.name}]: ${error}`;\n    }\n  }\n\n  // Cleanup function - called when user leaves or closes browser\n  clearAllData(): void {\n    localStorage.removeItem(this.documentsKey);\n    localStorage.removeItem(this.chatHistoryKey);\n    localStorage.removeItem('guestMode');\n  }\n\n  // Get storage usage info\n  getStorageInfo(): { documentsCount: number; chatMessagesCount: number; estimatedSize: string } {\n    const documents = this.getDocuments();\n    const chatHistory = this.getChatHistory();\n    \n    const documentsSize = JSON.stringify(documents).length;\n    const chatSize = JSON.stringify(chatHistory).length;\n    const totalBytes = documentsSize + chatSize;\n    \n    const estimatedSize = totalBytes < 1024 \n      ? `${totalBytes} bytes`\n      : totalBytes < 1024 * 1024\n      ? `${(totalBytes / 1024).toFixed(1)} KB`\n      : `${(totalBytes / (1024 * 1024)).toFixed(1)} MB`;\n\n    return {\n      documentsCount: documents.length,\n      chatMessagesCount: chatHistory.length,\n      estimatedSize\n    };\n  }\n}\n\nexport const guestService = new GuestService();\n\n// Setup cleanup when user closes browser/tab\nwindow.addEventListener('beforeunload', () => {\n  const isGuestMode = localStorage.getItem('guestMode') === 'true';\n  if (isGuestMode) {\n    guestService.clearAllData();\n  }\n});\n\n// Setup visibility change handler to detect when user switches tabs/minimizes\ndocument.addEventListener('visibilitychange', () => {\n  if (document.visibilityState === 'hidden') {\n    const isGuestMode = localStorage.getItem('guestMode') === 'true';\n    if (isGuestMode) {\n      // Set a timestamp when user hides the page\n      localStorage.setItem('guestModeLastActive', Date.now().toString());\n    }\n  } else if (document.visibilityState === 'visible') {\n    const isGuestMode = localStorage.getItem('guestMode') === 'true';\n    const lastActive = localStorage.getItem('guestModeLastActive');\n    \n    if (isGuestMode && lastActive) {\n      const timeDiff = Date.now() - parseInt(lastActive);\n      // If user was away for more than 30 minutes, clear guest data\n      if (timeDiff > 30 * 60 * 1000) {\n        guestService.clearAllData();\n        window.location.reload();\n      }\n    }\n  }\n}); "],"mappings":"AAEA;;AAWA,MAAMA,YAAY,CAAC;EAAAC,YAAA;IAAA,KACTC,YAAY,GAAG,gBAAgB;IAAA,KAC/BC,cAAc,GAAG,kBAAkB;EAAA;EAE3C;EACAC,YAAYA,CAAA,EAAoB;IAC9B,IAAI;MACF,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACL,YAAY,CAAC;MACtD,OAAOG,MAAM,GAAGG,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC,GAAG,EAAE;IACzC,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,OAAO,EAAE;IACX;EACF;EAEAE,YAAYA,CAACC,QAAkD,EAAiB;IAC9E,MAAMC,SAAS,GAAG,IAAI,CAACV,YAAY,CAAC,CAAC;IACrC,MAAMW,WAA0B,GAAG;MACjC,GAAGF,QAAQ;MACXG,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBC,UAAU,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;IACrC,CAAC;IAEDP,SAAS,CAACQ,IAAI,CAACP,WAAW,CAAC;IAC3BT,YAAY,CAACiB,OAAO,CAAC,IAAI,CAACrB,YAAY,EAAEM,IAAI,CAACgB,SAAS,CAACV,SAAS,CAAC,CAAC;IAClE,OAAOC,WAAW;EACpB;EAEAU,cAAcA,CAACC,UAAkB,EAAW;IAC1C,IAAI;MACF,MAAMZ,SAAS,GAAG,IAAI,CAACV,YAAY,CAAC,CAAC;MACrC,MAAMuB,iBAAiB,GAAGb,SAAS,CAACc,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACb,EAAE,KAAKU,UAAU,CAAC;MACxEpB,YAAY,CAACiB,OAAO,CAAC,IAAI,CAACrB,YAAY,EAAEM,IAAI,CAACgB,SAAS,CAACG,iBAAiB,CAAC,CAAC;MAC1E,OAAO,IAAI;IACb,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,OAAO,KAAK;IACd;EACF;EAEAoB,WAAWA,CAACJ,UAAkB,EAAwB;IACpD,MAAMZ,SAAS,GAAG,IAAI,CAACV,YAAY,CAAC,CAAC;IACrC,OAAOU,SAAS,CAACiB,IAAI,CAACF,GAAG,IAAIA,GAAG,CAACb,EAAE,KAAKU,UAAU,CAAC,IAAI,IAAI;EAC7D;;EAEA;EACAM,cAAcA,CAAA,EAAuB;IACnC,IAAI;MACF,MAAM3B,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACJ,cAAc,CAAC;MACxD,OAAOE,MAAM,GAAGG,IAAI,CAACC,KAAK,CAACJ,MAAM,CAAC,GAAG,EAAE;IACzC,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,OAAO,EAAE;IACX;EACF;EAEAuB,eAAeA,CAACC,OAAoD,EAAoB;IACtF,MAAMC,OAAO,GAAG,IAAI,CAACH,cAAc,CAAC,CAAC;IACrC,MAAMI,UAA4B,GAAG;MACnC,GAAGF,OAAO;MACVlB,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBC,UAAU,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;IACrC,CAAC;IAEDc,OAAO,CAACb,IAAI,CAACc,UAAU,CAAC;IACxB9B,YAAY,CAACiB,OAAO,CAAC,IAAI,CAACpB,cAAc,EAAEK,IAAI,CAACgB,SAAS,CAACW,OAAO,CAAC,CAAC;IAClE,OAAOC,UAAU;EACnB;;EAEA;EACA,MAAMC,kBAAkBA,CAACH,OAAe,EAAEI,iBAA4B,EAAEC,eAAyB,EAI9F;IACD,IAAI;MACF,IAAIC,OAAO,GAAG,EAAE;MAChB,IAAIC,cAAuD,GAAG,EAAE;MAEhE,IAAIF,eAAe,EAAE;QACnB,MAAMG,OAAO,GAAG,IAAI,CAACtC,YAAY,CAAC,CAAC;QACnCoC,OAAO,GAAGE,OAAO,CAACC,GAAG,CAACd,GAAG,IAAI,iBAAiBA,GAAG,CAACe,QAAQ,SAASf,GAAG,CAACgB,OAAO,EAAE,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;QAC9FL,cAAc,GAAGC,OAAO,CAACC,GAAG,CAACd,GAAG,KAAK;UAAEb,EAAE,EAAEa,GAAG,CAACb,EAAE;UAAE4B,QAAQ,EAAEf,GAAG,CAACe;QAAS,CAAC,CAAC,CAAC;MAC/E,CAAC,MAAM,IAAIN,iBAAiB,IAAIA,iBAAiB,CAACS,MAAM,GAAG,CAAC,EAAE;QAC5D,MAAML,OAAO,GAAG,IAAI,CAACtC,YAAY,CAAC,CAAC;QACnC,MAAM4C,YAAY,GAAGN,OAAO,CAACd,MAAM,CAACC,GAAG,IAAIS,iBAAiB,CAACW,QAAQ,CAACpB,GAAG,CAACb,EAAE,CAAC,CAAC;QAC9EwB,OAAO,GAAGQ,YAAY,CAACL,GAAG,CAACd,GAAG,IAAI,iBAAiBA,GAAG,CAACe,QAAQ,SAASf,GAAG,CAACgB,OAAO,EAAE,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;QACnGL,cAAc,GAAGO,YAAY,CAACL,GAAG,CAACd,GAAG,KAAK;UAAEb,EAAE,EAAEa,GAAG,CAACb,EAAE;UAAE4B,QAAQ,EAAEf,GAAG,CAACe;QAAS,CAAC,CAAC,CAAC;MACpF;MAEA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,4DAA4D,EAAE;QACzFC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAE9C,IAAI,CAACgB,SAAS,CAAC;UACnBU,OAAO;UACPM,OAAO;UACPe,eAAe,EAAEd;QACnB,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACS,QAAQ,CAACM,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAC9C;MAEA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClC,OAAO;QACLT,QAAQ,EAAEQ,IAAI,CAACR,QAAQ;QACvBU,YAAY,EAAEnB,cAAc,CAACM,MAAM,GAAG,CAAC;QACvCQ,eAAe,EAAEd;MACnB,CAAC;IACH,CAAC,CAAC,OAAO/B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAO;QACLwC,QAAQ,EAAE,0EAA0ExC,KAAK,EAAE;QAC3FkD,YAAY,EAAE,KAAK;QACnBL,eAAe,EAAE;MACnB,CAAC;IACH;EACF;;EAEA;EACA,MAAMM,mBAAmBA,CAACC,IAAU,EAAmB;IACrD,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;MAE7B,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,oEAAoE,EAAE;QACjGC,MAAM,EAAE,MAAM;QACdE,IAAI,EAAES;MACR,CAAC,CAAC;MAEF,IAAI,CAACb,QAAQ,CAACM,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;MACrD;MAEA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClC,OAAOD,IAAI,CAACQ,cAAc;IAC5B,CAAC,CAAC,OAAOxD,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;;MAE9C;MACA,IAAIoD,IAAI,CAACK,IAAI,CAACC,UAAU,CAAC,OAAO,CAAC,IAAIN,IAAI,CAACO,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;QAC7E,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;UACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;UAC/BD,MAAM,CAACE,MAAM,GAAIC,CAAC;YAAA,IAAAC,SAAA;YAAA,OAAKN,OAAO,EAAAM,SAAA,GAACD,CAAC,CAACE,MAAM,cAAAD,SAAA,uBAARA,SAAA,CAAUE,MAAgB,CAAC;UAAA;UAC1DN,MAAM,CAACO,OAAO,GAAG,MAAMR,MAAM,CAAC,IAAIjB,KAAK,CAAC,0BAA0B,CAAC,CAAC;UACpEkB,MAAM,CAACQ,UAAU,CAACrB,IAAI,CAAC;QACzB,CAAC,CAAC;MACJ;MAEA,OAAO,+BAA+BA,IAAI,CAACO,IAAI,MAAM3D,KAAK,EAAE;IAC9D;EACF;;EAEA;EACA0E,YAAYA,CAAA,EAAS;IACnB9E,YAAY,CAAC+E,UAAU,CAAC,IAAI,CAACnF,YAAY,CAAC;IAC1CI,YAAY,CAAC+E,UAAU,CAAC,IAAI,CAAClF,cAAc,CAAC;IAC5CG,YAAY,CAAC+E,UAAU,CAAC,WAAW,CAAC;EACtC;;EAEA;EACAC,cAAcA,CAAA,EAAiF;IAC7F,MAAMxE,SAAS,GAAG,IAAI,CAACV,YAAY,CAAC,CAAC;IACrC,MAAMmF,WAAW,GAAG,IAAI,CAACvD,cAAc,CAAC,CAAC;IAEzC,MAAMwD,aAAa,GAAGhF,IAAI,CAACgB,SAAS,CAACV,SAAS,CAAC,CAACiC,MAAM;IACtD,MAAM0C,QAAQ,GAAGjF,IAAI,CAACgB,SAAS,CAAC+D,WAAW,CAAC,CAACxC,MAAM;IACnD,MAAM2C,UAAU,GAAGF,aAAa,GAAGC,QAAQ;IAE3C,MAAME,aAAa,GAAGD,UAAU,GAAG,IAAI,GACnC,GAAGA,UAAU,QAAQ,GACrBA,UAAU,GAAG,IAAI,GAAG,IAAI,GACxB,GAAG,CAACA,UAAU,GAAG,IAAI,EAAEE,OAAO,CAAC,CAAC,CAAC,KAAK,GACtC,GAAG,CAACF,UAAU,IAAI,IAAI,GAAG,IAAI,CAAC,EAAEE,OAAO,CAAC,CAAC,CAAC,KAAK;IAEnD,OAAO;MACLC,cAAc,EAAE/E,SAAS,CAACiC,MAAM;MAChC+C,iBAAiB,EAAEP,WAAW,CAACxC,MAAM;MACrC4C;IACF,CAAC;EACH;AACF;AAEA,OAAO,MAAMI,YAAY,GAAG,IAAI/F,YAAY,CAAC,CAAC;;AAE9C;AACAgG,MAAM,CAACC,gBAAgB,CAAC,cAAc,EAAE,MAAM;EAC5C,MAAMC,WAAW,GAAG5F,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,KAAK,MAAM;EAChE,IAAI2F,WAAW,EAAE;IACfH,YAAY,CAACX,YAAY,CAAC,CAAC;EAC7B;AACF,CAAC,CAAC;;AAEF;AACAvE,QAAQ,CAACoF,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;EAClD,IAAIpF,QAAQ,CAACsF,eAAe,KAAK,QAAQ,EAAE;IACzC,MAAMD,WAAW,GAAG5F,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,KAAK,MAAM;IAChE,IAAI2F,WAAW,EAAE;MACf;MACA5F,YAAY,CAACiB,OAAO,CAAC,qBAAqB,EAAEN,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC;IACpE;EACF,CAAC,MAAM,IAAIN,QAAQ,CAACsF,eAAe,KAAK,SAAS,EAAE;IACjD,MAAMD,WAAW,GAAG5F,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,KAAK,MAAM;IAChE,MAAM6F,UAAU,GAAG9F,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAC;IAE9D,IAAI2F,WAAW,IAAIE,UAAU,EAAE;MAC7B,MAAMC,QAAQ,GAAGpF,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGoF,QAAQ,CAACF,UAAU,CAAC;MAClD;MACA,IAAIC,QAAQ,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE;QAC7BN,YAAY,CAACX,YAAY,CAAC,CAAC;QAC3BY,MAAM,CAACO,QAAQ,CAACC,MAAM,CAAC,CAAC;MAC1B;IACF;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}